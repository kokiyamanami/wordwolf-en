
2024/10/01 メモ

・reactの起動順序に関して
・状態を管理するuseStateに関して
・

Reactのフォルダ構成について
assets/:

静的なリソース（画像、フォント、スタイルシートなど）を格納します。
images/ や styles/ など、アプリケーション内で使用するアセットを管理します。
components/:

再利用可能なUIコンポーネントを格納します。
Header.jsやFooter.jsのように、ページ全体で使用される共通コンポーネントをこのフォルダに保存します。
各コンポーネントは独立していて、他のコンポーネントと組み合わせてページを構成します。
pages/:

各ページに対応するコンポーネントを格納します。例えば、Home.js や About.js など、URLごとに対応するページコンポーネントをここに配置します。
このフォルダを使って、ページごとにアプリケーションの構造を整理します。
services/:

API呼び出しや外部サービスとの通信を行うコードを管理します。例えば、api.js にはバックエンドとやり取りするAPI関数を定義します。
utils/:

ヘルパー関数やユーティリティ関数を格納します。ここではアプリケーション全体で再利用できる汎用的なロジックを保存します。
App.js:

アプリケーションのメインコンポーネント。ルーティングやグローバルな設定を管理します。基本的に各ページを<Route>などでここから呼び出します。
index.js:

Reactアプリケーションのエントリーポイントです。ReactDOMを使ってApp.jsをpublic/index.htmlのDOMにマウントします。
reportWebVitals.js:

アプリケーションのパフォーマンスを測定するためのコードが含まれています。必要に応じて、この機能を有効にできます。
推奨される追加フォルダ
hooks/: Reactのカスタムフックを格納するためのフォルダ。カスタムフックがプロジェクト内で複数利用される場合は、ここで整理します。
contexts/: React Context APIを利用してグローバルな状態管理をする場合に使用します。
